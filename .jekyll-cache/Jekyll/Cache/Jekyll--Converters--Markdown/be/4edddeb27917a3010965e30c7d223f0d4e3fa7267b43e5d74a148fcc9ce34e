I"3<p>Next to changing the interface to look like something from a hacker film, a key feature that greatly improves workflow in any code editor is user-defined hotkeys.
As anyone who regularily uses more than one code editor knows, having a different set of hotkeys for each environment is just an annoying and unnecessary hassle.</p>

<p>I regularly use three different editors for university and personal projects: <a href="rstudio.com/">RStudio</a>, <a href="www.mathworks.com/products/matlab.html">Matlab</a>, and <a href="https://code.visualstudio.com/">Visual Studio Code</a>. Both RStudio and VSC have a nice, large set of possible hotkeys, which can easily be bound to different key combinations. To be fair, Matlab does also allow reassigning key bindings (<a href="http://hoeckerson.de/notes/2016/07/keyboard-shortcuts-in-matlab-2016a-windows-7-german/">This</a> is the most comprehensive list I‚Äôve found outside of the actual program). Unfortunately the options are extremely limited and sometimes just not very well thought out. For example: in what world is it better to have seperate keybindings for commenting and uncommenting a line instead of one toggle switch?</p>

<p>The hotkey that I was missing most of all was moving a line up or down (typically <kbd>ctrl</kbd> + <kbd>shift</kbd> + <kbd>Up</kbd> Ctrl+Shift+UpArrow/DownArrow).</p>

<p><img src="/resources/images/blog1/movelineinaction.gif" alt="Move line in Action" title="Move line" /></p>

<p>Effectively, every time I return to Matlab to program an experiment I feel like someone has tied the laces of my shoes together. Recently I tried to research the problem a little bit more and was surprised to find that there was not a lot of information or existing solutions to this. After some experimenting, I found two promising hacks.</p>

<h2 id="what-matlab-calls-shortcuts">What Matlab Calls ‚ÄúShortcuts‚Äù</h2>
<p>Firstly, Matlab does have an native mechanism to perform custom actions at a keypress: their so-called shortcuts.
I very much get the impression that they are not designed to be used for something as banal as moving lines up and down. It seems like they are meant as a tool to quickly access frequently used, self-defined functions. But, as it turns out, you <em>can</em> use them to move a line.</p>

<p>Matlab shortcuts live in the top right corner of the interface. Adding a shortcut makes a little icon appear which can be accessed by clicking or by pressing alt and then the number that appears next to the icon.
So, you can make it perform a custom action, but the hotkey binding is unchangeably <kbd>alt</kbd>+<kbd>some number</kbd>. So, I wasn‚Äôt entirely convinced by this, but heres how to do it:</p>

<p>Click ‚Äúadd shortcut‚Äù in the upper right corner of the interface.</p>

<p><img src="/resources/images/blog1/s1m.jpg" alt="New Shortcut" title="New Shortcut" class="shadow" /></p>

<p>Put in a title and the script of what you want the shortcut to do.</p>

<p><img src="/resources/images/blog1/s2s.jpg" alt="New Shortcut" title="New Shortcut" class="shadow" /></p>

<p>In my case I wanted to move the lines up and down in the editor. I found a a script for that on <a href="https://github.com/m-pilia/matlab-move-line/blob/master/matlab-move-line.m">github</a>.
Disclaimer: this code only works in 2016b or later because Matlab has changed how it treats strings (This is awesome by the way, strings in Matlab were always really annoying to deal with).</p>

<div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">% Move Line</span>
<span class="c1">% direction: +1 to move down, -1 to move up</span>
<span class="n">d</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="c1">% get text and cursor position</span>
<span class="n">currentEditor</span> <span class="o">=</span> <span class="nb">matlab</span><span class="o">.</span><span class="n">desktop</span><span class="o">.</span><span class="n">editor</span><span class="o">.</span><span class="n">getActive</span><span class="p">;</span>
<span class="n">selection</span> <span class="o">=</span> <span class="n">currentEditor</span><span class="o">.</span><span class="n">Selection</span><span class="p">;</span>
<span class="nb">lines</span> <span class="o">=</span> <span class="nb">splitlines</span><span class="p">(</span><span class="n">currentEditor</span><span class="o">.</span><span class="n">Text</span><span class="p">);</span>
<span class="nb">line</span> <span class="o">=</span> <span class="n">selection</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="c1">% boundary check</span>
<span class="k">if</span> <span class="nb">line</span> <span class="o">+</span> <span class="n">d</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="nb">line</span> <span class="o">+</span> <span class="n">d</span> <span class="o">&gt;</span> <span class="nb">length</span><span class="p">(</span><span class="nb">lines</span><span class="p">)</span>
    <span class="k">return</span><span class="p">;</span>
<span class="k">end</span>
<span class="c1">% swap lines</span>
<span class="n">tmp</span> <span class="o">=</span> <span class="nb">lines</span><span class="p">(</span><span class="nb">line</span><span class="p">);</span>
<span class="nb">lines</span><span class="p">(</span><span class="nb">line</span><span class="p">)</span> <span class="o">=</span> <span class="nb">lines</span><span class="p">(</span><span class="nb">line</span> <span class="o">+</span> <span class="n">d</span><span class="p">);</span>
<span class="nb">lines</span><span class="p">(</span><span class="nb">line</span> <span class="o">+</span> <span class="n">d</span><span class="p">)</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
<span class="c1">% update text and cursor position in the editor</span>
<span class="n">currentEditor</span><span class="o">.</span><span class="n">Text</span> <span class="o">=</span> <span class="nb">char</span><span class="p">(</span><span class="nb">strjoin</span><span class="p">(</span><span class="nb">lines</span><span class="p">,</span> <span class="s1">'\n'</span><span class="p">));</span>
<span class="n">selection</span> <span class="o">=</span> <span class="n">selection</span> <span class="o">+</span> <span class="p">[</span><span class="n">d</span> <span class="mi">0</span> <span class="n">d</span> <span class="mi">0</span><span class="p">];</span>
<span class="n">currentEditor</span><span class="o">.</span><span class="n">Selection</span> <span class="o">=</span> <span class="n">selection</span><span class="p">;</span>
<span class="nb">clear</span> <span class="n">currentEditor</span> <span class="n">selection</span><span class="p">;</span>
</code></pre></div></div>

<p>So I added one shortcut for the line up version with <code class="language-plaintext highlighter-rouge">d=+1</code> and a second for the line down version with <code class="language-plaintext highlighter-rouge">d=-1</code>.</p>

<p>While I was at it I also added a useful little shortcut to copy a line from the editor into the matlab terminal and execute it. RStudio features this prominently and it can be useful when debugging and when showing other people your code line by line. 
I found this code on the <a href="https://de.mathworks.com/matlabcentral/answers/132119-keyboard-shortcut-to-evaluate-current-line">Matlab forum</a></p>

<div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">% Shortcut summary goes here</span>
<span class="n">currentEditor</span> <span class="o">=</span> <span class="nb">matlab</span><span class="o">.</span><span class="n">desktop</span><span class="o">.</span><span class="n">editor</span><span class="o">.</span><span class="n">getActive</span><span class="p">;</span>
<span class="n">originalSelection</span> <span class="o">=</span> <span class="n">currentEditor</span><span class="o">.</span><span class="n">Selection</span><span class="p">;</span>
<span class="nb">assert</span><span class="p">(</span><span class="n">originalSelection</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">==</span><span class="n">originalSelection</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span><span class="c1">%Check that multiple lines are not selected</span>
<span class="n">currentEditor</span><span class="o">.</span><span class="n">Selection</span> <span class="o">=</span> <span class="p">[</span><span class="n">originalSelection</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="mi">1</span> <span class="n">originalSelection</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="nb">Inf</span><span class="p">];</span><span class="c1">%Select the whole line</span>
<span class="nb">eval</span><span class="p">(</span><span class="n">currentEditor</span><span class="o">.</span><span class="n">SelectedText</span><span class="p">);</span><span class="c1">%Run the whole line</span>
<span class="nb">clear</span> <span class="n">currentEditor</span> <span class="n">originalSelection</span>
</code></pre></div></div>

<p>I also went all-out and added little icons for each shortcut. I used the <a href="http://fontawesome.io/">Font Awesome</a> symbols and just turned them into jpgs, which is the only format Matlab accepts.</p>

<p><img src="/resources/images/blog1/up2.jpg" alt="Line Up" title="Line Up" height="50px" class="inline" />
<img src="/resources/images/blog1/down2.jpg" alt="Line Down" title="Line Down" height="50px" class="inline" />
<img src="/resources/images/blog1/magic2.jpg" alt="Execute Line" title="Execute Line" height="50px" class="inline" /></p>

<p>So now the top corner of my Matlab looks a bit nicer.</p>

<p><img src="/resources/images/blog1/s3s.jpg" alt="Nicer Icons" title="Nicer Icons" class="shadow" /></p>

<p>Now Pressing alt should make little numbers show up next to the shortcuts. So <kbd>alt</kbd> + <kbd>1</kbd> will move a line up, <kbd>alt</kbd> + <kbd>2</kbd> down, and <kbd>alt</kbd> + <kbd>3</kbd> will execute the line.</p>

<p><img src="/resources/images/blog1/s4small.jpg" alt="Nicer Icons" title="Nicer Icons" class="shadow" /></p>

<p>This is a nice-ish sort-of-solution, but I was still somewhat dissatisfied that I can‚Äôt just access my hotkey with the key combination I want.</p>

<h2 id="autohotkey">Autohotkey</h2>
<p>Cue: Autohotkey. This is the excuse I‚Äôve been looking for to have a look at the Autohotkey scripting language for windows. I won‚Äôt go into detail here about how it works as there are plenty of tutorials for autohotkey out there already and it‚Äôs relatively simple to use. If you haven‚Äôt heard of it: definitely check it out. The idea is that you can write a script that will move the mouse and execute clicks and keyboard input. Tell it exactly how you would perform your action in terms of clicks and keys and Autohotkey makes it repreatable at the press of a key. It‚Äôs made for setting up custom hotkeys. I thought this would work really well. Unfortunately Autohotkey is windows only, but I‚Äôm sure this kind of thing exists for other operating systems.</p>

<p>So, I tried writing the simplest possible move line in autohotkey. I mark the active line, copy it, move the cursor up or down, and paste the line back. While this works fine in programs like the Windows Editor and Libre Office, no such luck in Matlab. It turns out Matlab registers the Keypresses really slowly and sequentially.</p>

<p>The way to get it to work was to insert a ‚ÄúSleep‚Äù between every other command. Now, if AHK sleeps for a second between every other keypress, the hotkey works, but it‚Äôs slow. Partly for this reason I decided to map PgDown and PgUp to the hotkey, because I had the impression that less keypresses upset Matlab less. 
In the code, I‚Äôve set the ‚ÄúSleep‚Äùs to the smallest numer it still worked with on my machine. This may differ on other computers.</p>

<script src="https://gist.github.com/lschwetlick/8199c5bb3648d4dfc73dc3395b44e4fe.js"></script>

<p>I also tried to simply make Autohotkey send alt+number, triggering the Matlab Shortcut. This also <em>kind of</em> worked, but I ended up going with the pure AHK version because it causes less visual noise (upon AHK sending alt sometimes the whole editor window refreshes - it just didn‚Äôt look as seamless as the other version).</p>

<h2 id="conclusion">Conclusion</h2>
<p>The solution I have settled on for my ‚Äúmove line‚Äù hotkey is the pure AHK script, even if it is a little bit slow and sometimes doesnt register an input. For the little ‚Äúexecute line‚Äù snippet, I use the matlab shortcut bound to Alt+Enter with Autohotkey.
I have also just loved using line up/down hotkey in other text editors with tasks like reordering a To Do list or when taking notes. To be honest though, I feel like this is the computer equivalent of patching something up with duct tape. It would be much nicer if Matlab could just drag their editor out of the ‚Äô90s.</p>
:ET